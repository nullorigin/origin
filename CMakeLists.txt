cmake_minimum_required(VERSION 3.12)

project("Origin" C CXX)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_EXPORT_COMPILE_COMMANDS "${CMAKE_CURRENT_SOURCE_DIR}/compile-commands.json")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wno-packed-non-pod -Wno-unused-function")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

if(WIN32)
    if(MSVC AND CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        set(COMPILER_BIN "D:\\Programs\\VisualStudio\\VC\\Tools\\MSVC\\14.40.33617\\bin\\Hostx64/x64")
        set(LIB "D:\\Programs\\VisualStudio\\VC\\Tools\\MSVC\\14.40.33617\\lib\\x64")
        set(INCLUDE_DIR "D:\\Programs\\VisualStudio\\VC\\Tools\\MSVC\\14.40.33617\\include")
        set(SHARE "D:\\Programs\\VisualStudio\\VC\\Tools\\MSVC\\14.40.33617\\lib\\x64")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}\\cl.exe")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}\\cl.exe")
    elseif(MINGW AND CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang++")
        set(COMPILER_BIN "D:\\Programs\\llvm-mingw\\bin")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}\\clang++.exe")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}\\clang.exe")
        set(ENV LLVM 1)
        set(ENV LLVM_IAS 1)
    elseif(MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(COMPILER_BIN "D:\\Programs\\msys2\\mingw64\\bin")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}\\gcc.exe")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}\\g++.exe")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" "-fno-exceptions" "-fno-rtti")
    endif()

    set(CMAKE_COMMAND "${COMPILER_BIN}\\cmake.exe")
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
    set(CMAKE_INSTALL_PREFIX "D:\\usr\\local")
    set(OS windows)
elseif(NOT WIN32 AND NOT APPLE)
    if(CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(COMPILER_BIN "/home/matt/usr/bin")
        set(SHARE "/home/matt/usr/share")
        set(BIN "/home/matt/usr/bin")
        set(LIB "/home/matt/usr/lib")
        set(INCLUDE_DIR "/home/matt/usr/include")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}/clang++")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}/clang")
        set(ENV LLVM 1)
        set(ENV LLVM_IAS 1)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        set(COMPILER_BIN "/usr/bin")
        set(SHARE "/usr/share")
        set(BIN "/usr/bin")
        set(LIB "/usr/lib")
        set(INCLUDE_DIR "/usr/include")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}/g++")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}/gcc")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" "-fno-exceptions" "-fno-rtti")
    endif()

    set(CMAKE_COMMAND "${BIN}/cmake")
    set(CMAKE_ROOT "${SHARE}/cmake")
    set(PATH ${BIN} ${PATH})
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
    set(CMAKE_INSTALL_PREFIX "/usr/local")
    set(OS linux)
endif()

set(CMAKE_BUILD_TYPE Debug)
set(ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(SRC_DIR "${ROOT_DIR}/src")
set(INCLUDE_DIR "${ROOT_DIR}/include" "${INCLUDE_DIR}")
set(TOOLS_DIR "${ROOT_DIR}/tools")
set(SOURCE "${SRC_DIR}/Origin.cpp" "${SRC_DIR}/math/Geometry.cpp" "${SRC_DIR}/math/Biquad.cpp" "${SRC_DIR}/math/Timer.cpp" "${SRC_DIR}/debug/Message.cpp" "${ROOT_DIR}/test/MemConvert.cpp")
set(INCLUDE "${SRC_DIR}/Origin.hpp" "${SRC_DIR}/math/Basic.hpp" "${SRC_DIR}/math/Geometry.hpp" "${SRC_DIR}/math/Biquad.hpp" "${SRC_DIR}/math/Timer.hpp" "${SRC_DIR}/debug/Message.hpp" "${SRC_DIR}/text/String.hpp")

if(WIN32)
    add_executable(Origin WIN32 ${SOURCE} ${INCLUDE})
elseif(NOT WIN32)
    add_executable(Origin ${SOURCE} ${INCLUDE})
endif()
target_include_directories(Origin PUBLIC "${SRC_DIR}" "${INCLUDE_DIR}" "${SRC_DIR}/text" "${SRC_DIR}/debug" "${SRC_DIR}/math")
option(Origin_USE_CLANG_TIDY "Use clang tidy for static analysis" ON)
if (Origin_USE_CLANG_TIDY AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang++" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
      set_target_properties(Origin PROPERTIES CXX_CLANG_TIDY "/home/matt/llvm/bin/clang-tidy")
endif()
