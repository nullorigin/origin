cmake_minimum_required(VERSION 3.12)

project(Origin CXX C)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(EXPORT_COMPILE_COMMANDS "${CMAKE_CURRENT_SOURCE_DIR}/compile_commands.json")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-packed-non-pod -Wno-unused-function -Wno-unused-value -Wno-char-subscripts -Wno-unused-variable -Wno-unused-private-field -Wno-format-security")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror ")
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_INCLUDE_CURRENT_DIR)
set(CMAKE_PREFIX_PATH "/home/matt/usr")
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
option(USE_CLANG_COMPILER "Use clang compiler" ON)
if(WIN32)
    if(MSVC AND USE_CLANG_COMPILER)
        set(COMPILER_BIN "A:\\usr\\bin")
        set(LIB "A:\\usr\\lib")
        set(INCLUDE_DIR "A:\\usr\\include")
        set(SHARE "A:\\usr\\share")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}\\clang-cl.exe")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}\\clang-cl.exe")
    elseif(MINGW AND USE_CLANG_COMPILER)
        set(COMPILER_BIN "A:\\usr\\bin")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}\\clang++.exe")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}\\clang.exe")
        set(ENV LLVM 1)
        set(ENV LLVM_IAS 1)
    elseif(MINGW AND NOT USE_CLANG_COMPILER)
        set(COMPILER_BIN "A:\\usr\\bin")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}\\gcc.exe")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}\\g++.exe")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" " -fno-exceptions" " -fno-rtti")
    endif()

    set(CMAKE_COMMAND "${COMPILER_BIN}\\cmake.exe")
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
    set(CMAKE_INSTALL_PREFIX "D:\\usr\\local")
    set(OS windows)
elseif(NOT WIN32 AND NOT APPLE)
    if(USE_CLANG_COMPILER)
    set(COMPILER_BIN "/usr/lib/llvm/18/bin")
        set(SHARE "/usr/lib/llvm/18/share")
        set(BIN "/usr/lib/llvm/18/bin")
        set(LIB "/usr/lib/llvm/18/lib")
        set(INCLUDE_DIR "/usr/include/c++/v1" "/usr/lib/llvm/18/include")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}/clang++")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}/clang")
        set(ENV LLVM 1)
        set(ENV LLVM_IAS 1)
    else()
        set(COMPILER_BIN "/usr/bin")
        set(SHARE "/usr/share")
        set(BIN "/usr/bin")
        set(LIB "/usr/lib")
        set(INCLUDE_DIR "/usr/include")
        set(CMAKE_CXX_COMPILER "${COMPILER_BIN}/g++")
        set(CMAKE_C_COMPILER "${COMPILER_BIN}/gcc")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" "-fno-exceptions" "-fno-rtti")
    endif()
    set(CMAKE_COMMAND "${BIN}/cmake")
    set(CMAKE_ROOT "${SHARE}/cmake")
    set(PATH ${BIN} ${PATH})
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
    set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
    set(CMAKE_INSTALL_PREFIX "/usr/local")
    set(OS linux)
endif()

set(CMAKE_BUILD_TYPE Debug)
set(ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(SRC_DIR "${ROOT_DIR}/src")
set(CMAKE_INCLUDE_DIRECTORIES_BEFORE ON)
include_directories("${INCLUDE_DIR}" "${SRC_DIR}" "${SRC_DIR}/text" "${SRC_DIR}/debug" "${SRC_DIR}/math" "${SRC_DIR}/process")
set(TOOLS_DIR "${ROOT_DIR}/tools")
set(SOURCE "${SRC_DIR}/Origin.cpp" "${SRC_DIR}/math/Geometry.cpp" "${SRC_DIR}/math/Biquad.cpp" "${SRC_DIR}/math/Timer.cpp" "${SRC_DIR}/debug/Message.cpp" "${ROOT_DIR}/test/Main.cpp" "${SRC_DIR}/process/Exec.cpp" "${SRC_DIR}/process/Console.cpp")

if(WIN32)
    add_executable(Origin WIN32 ${SOURCE} ${INCLUDE})
elseif(NOT WIN32)
    add_executable(Origin ${SOURCE} ${INCLUDE})
endif()
target_include_directories(Origin PUBLIC "${INCLUDE_DIRECTORIES}")
option(Origin_USE_CLANG_TIDY "Use clang tidy for static analysis" ON)
if (Origin_USE_CLANG_TIDY)
      set_target_properties(Origin PROPERTIES CXX_CLANG_TIDY "/usr/lib/llvm/18/bin/clang-tidy")
endif()
